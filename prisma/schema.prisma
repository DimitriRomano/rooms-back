// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator tsed {
  provider = "tsed-prisma"
  // output   = "../prisma/generated/tsed"
}

model Auth {
  id              Int       @id @default(autoincrement())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  // @TsED.Email()
  // @TsED.Description("User email, must be unique")
  email           String    @unique
  // @TsED.WriteOnly(true)
  password        String
  role            Role      @default(USER)
  // @TsED.Description("User activation status")
  disabled        Boolean   @default(false)
  emailVerifiedAt DateTime?
  // @TsED.Description("User jwt token")
  token           String?

  bookings  Booking[]
  Favorite  Favorite[]
  image     String?
  firstName String
  lastName  String
  hotels    Hotel[]
}

enum Role {
  ADMIN
  HOTEL
  USER
}

model Hotel {
  id           Int            @id @default(autoincrement())
  name         String
  description  String
  address      String
  city         String
  state        String
  country      String
  zip          String
  phone        String
  email        String
  website      String
  rooms        Room[]
  Favorite     Favorite[]
  FeatureHotel FeatureHotel[]
  longitude    Float
  latitude     Float
  images       String[]
  Auth         Auth?          @relation(fields: [authId], references: [id], onDelete: Cascade)
  authId       Int?
}

model Room {
  id          Int           @id @default(autoincrement())
  name        String
  description String
  price       Float
  hotel       Hotel         @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  hotelId     Int
  bookings    Booking[]
  isAvailable Boolean       @default(true)
  FeatureRoom FeatureRoom[]
  images      String[]
  nbBed       Int
  capacity    Int
}

model Booking {
  id        Int      @id @default(autoincrement())
  checkIn   DateTime
  checkOut  DateTime
  room      Room?    @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  nbPerson  Int
  status    Status   @default(PENDING)
  Auth      Auth?    @relation(fields: [authId], references: [id], onDelete: Cascade)
  authId    Int?
}

enum Status {
  PENDING
  CONFIRMED
  REFUSED
  CANCELED
  ENDED
}

model Favorite {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  hotel     Hotel    @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  hotelId   Int
  Auth      Auth?    @relation(fields: [authId], references: [id], onDelete: Cascade)
  authId    Int?
}

model Feature {
  id                Int              @id @default(autoincrement())
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  name              String
  icon              String?
  FeatureHotel      FeatureHotel[]
  FeatureRoom       FeatureRoom[]
  FeatureCategory   FeatureCategory? @relation(fields: [featureCategoryId], references: [id], onDelete: Cascade)
  featureCategoryId Int?
}

model FeatureCategory {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  Features  Feature[]
}

model FeatureHotel {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  feature   Feature  @relation(fields: [featureId], references: [id], onDelete: Cascade)
  featureId Int
  hotel     Hotel    @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  hotelId   Int
}

model FeatureRoom {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  feature   Feature  @relation(fields: [featureId], references: [id], onDelete: Cascade)
  featureId Int
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId    Int
}
